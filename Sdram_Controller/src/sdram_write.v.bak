// *********************************************************************************
// Project Name : OSXXXX
// Author       : ZhangXiaoHong
// Email        : 1208481840@qq.com
// Website      : http://www.opensoc.cn/
// Create Time  : 2018/7/30 21:09:53
// File Name    : .v
// Module Name  : 
// Called By    :
// Abstract     :
//
// CopyRight(c) 2016, OpenSoc Studio.. 
// All Rights Reserved
//
// *********************************************************************************
// Modification History:
// Date         By              Version                 Change Description
// -----------------------------------------------------------------------
// 2018/7/30    XioaHong          1.0                     Original
//  
// *********************************************************************************
`timescale      1ns/1ns


module sdram_write(
input                   s_clk                   ,   
input                   s_rst_n                 ,   

input                   wr_trig                 ,   

input                   wr_en                   ,   
input                   ref_req                 ,   
output wire              wr_req                  ,   
output reg              flag_wr_end             ,   
output reg [3:0]        wr_cmd                  ,   
output reg [11:0]       wr_addr                 ,   
output wire [1:0]        wr_bank                 ,   
output wire [15:0]       wr_data                 ,

  // WFIFO Interfaces
        output  wire            wfifo_rd_en             ,
        input           [ 7:0]  wfifo_rd_data
);



localparam S_IDLE = 5'b0_0001;
localparam S_REQ  = 5'b0_0010;
localparam S_ACT  = 5'b0_0100;
localparam S_WR   = 5'b0_1000;
localparam S_PRE  = 5'b1_0000;
localparam CMD_NOP  = 4'b0111;
localparam CMD_PRE  = 4'b0010;
localparam CMD_AREF = 4'b0001;
localparam CMD_ACT  = 4'b0011;
localparam CMD_WR   = 4'b0100;

reg                             flag_wr                         ;       
reg [4:0]                       state                           ;       
reg                             flag_act_end                    ;       
reg                             flag_pre_end                    ;       
reg                             sd_row_end                      ;       
reg [1:0]                       burst_cnt                       ;       
reg [1:0]                       burst_cnt_t                     ;       
reg                             wr_data_end                     ;       
reg [2:0]                       act_cnt                         ;       
reg [2:0]                       break_cnt                       ;       
reg [6:0]                       col_cnt                         ;       
reg [11:0]                      row_addr                        ;       
wire [8:0]                      col_addr                        ;       



//------------------------------------------------------- 
//    flag_wr
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            flag_wr <= 'd0;
//	else if(wr_trig == 1'b1 && state == S_IDLE)
	else if(wr_trig == 1'b1 && flag_wr == 1'b0)
            flag_wr <= 1'b1;
        else if(wr_data_end == 1'b1)
            flag_wr <= 'd0;
        else ;
end


//------------------------------------------------------- 
//    burst_cnt 
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            burst_cnt <= 'd0;
        else if(state == S_WR)
            burst_cnt <= burst_cnt + 1'b1;
	else 
	    burst_cnt <= 'd0;
end

//------------------------------------------------------- 
//    burst_cnt_t
always  @(posedge s_clk) begin
    burst_cnt_t <= burst_cnt;
end


//------------------------------------------------------- 
//    state
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            state <= S_IDLE;
        else begin
            case(state)
                S_IDLE:
                    if(wr_trig == 1'b1)
                        state <= S_REQ;
                    else 
                        state <= S_IDLE;
                S_REQ:
                    if(wr_en == 1'b1)
                        state <= S_ACT;
                    else 
                        state <= S_REQ;
                S_ACT:
                    if(flag_act_end)
                        state <= S_WR;
                    else 
                        state <= S_ACT;
                S_WR:
                    if(wr_data_end == 1'b1)
                        state <= S_PRE;
                    else if(ref_req == 1'b1 && burst_cnt == 'd3 && flag_wr == 1'b1)
                        state <= S_PRE;
                    else if(sd_row_end == 1'b1 && flag_wr == 1'b1)
                        state <= S_PRE;
                    else
                        state <= S_WR;
                S_PRE:
                    if(flag_wr == 1'b1 && flag_pre_end == 1'b1)
                        state <= S_ACT;
                    else if(ref_req == 1'b1 && flag_wr == 1'b1)
                        state <= S_REQ;
         //           else if(wr_data_end == 1'b1)
	            else if(flag_wr == 1'b0)    
                        state <= S_IDLE;
                    else
                        state <= S_PRE;
                default:
                    state <= S_IDLE;
            endcase
        end
end


//------------------------------------------------------- 
//    wr_cmd
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            wr_cmd <= CMD_NOP;
        else begin 
            case(state)
                S_ACT:
                    if(act_cnt == 'd0) begin
                        wr_cmd <= CMD_ACT;
                        wr_addr <= row_addr;
		    end
                    else begin 
                        wr_cmd <= CMD_NOP;
                        wr_addr <= 'd0;
	       	    end
                S_WR:
                    if(burst_cnt == 'd0) begin
                        wr_cmd <= CMD_WR;
                        wr_addr <= {3'b010, col_addr};
		    end
                    else begin 
                        wr_cmd <= CMD_NOP;
                        wr_addr <= 'd0;
		    end
                S_PRE:
                    if(break_cnt == 'd0) begin
                        wr_cmd <= CMD_PRE;
                        wr_addr <= 12'b0100_0000_0000;
		    end
                    else begin
                        wr_cmd <= CMD_NOP;
                        wr_addr <= 'd0;
		    end
            endcase
        end
end




//------------------------------------------------------- 
//    flag_act_end
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            flag_act_end <= 'd0;
        else if(act_cnt == 'd3)
            flag_act_end <= 1'b1;
        else 
            flag_act_end <= 'd0;
end


//------------------------------------------------------- 
//   act_cnt 
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            act_cnt <= 'd0;
        else if(state == S_ACT)
            act_cnt <= act_cnt + 1'b1;
        else 
	   act_cnt <= 'd0;
end

//------------------------------------------------------- 
//    flag_pre_end
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            flag_pre_end <= 'd0;
        else if(break_cnt == 'd3)
            flag_pre_end <= 1'b1;
        else 
            flag_pre_end <= 'd0;
end




//------------------------------------------------------- 
//    flag_wr_end
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            flag_wr_end <= 'd0;
        else if( (ref_req == 1'b1 && state == S_PRE) ||
		(state == S_PRE && flag_wr == 1'b0))  //这里我漏了后面的一个条件
            flag_wr_end <= 1'b1;
        else 
            flag_wr_end <= 'd0;
end



//------------------------------------------------------- 
//    break_cnt
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            break_cnt <= 'd0;
        else if(state == S_PRE)
            break_cnt <= break_cnt + 1'b1;
	else 
	    break_cnt <= 'd0;
end


//------------------------------------------------------- 
//    wr_data_end
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            wr_data_end <= 'd0;
        else if(row_addr == 'd2 && col_addr == 'd511)
            wr_data_end <= 1'b1;
        else 
            wr_data_end <= 'd0;
end




//------------------------------------------------------- 
//    sd_row_end
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            sd_row_end <= 'd0;
        else if(col_addr == 'd509)
            sd_row_end <= 1'b1;
        else 
            sd_row_end <= 'd0;
end


//------------------------------------------------------- 
//    col_cnt
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            col_cnt <= 'd0;
	else if(col_addr == 'd511)
		col_cnt <= 'd0;
        else if(burst_cnt_t == 'd3)
            col_cnt <=  col_cnt + 1'b1;
end

//------------------------------------------------------- 
//    row_addr
always  @(posedge s_clk or negedge s_rst_n) begin
        if(s_rst_n == 1'b0)
            row_addr <= 'd0;
        else if(sd_row_end == 1'b1)
            row_addr <= row_addr + 1'b1;
end

//------------------------------------------------------- 
//    wr_data
/*
always @(*) begin
case(burst_cnt_t)
    0: wr_data <= 'd3;
    1: wr_data <= 'd5;
    2: wr_data <= 'd6;
    3: wr_data <= 'd8;
    default: wr_data <= 'd0;
endcase
end
*/


assign 	col_addr = {col_cnt, burst_cnt_t};
assign 	wr_bank = 2'b0;
assign 	wr_req = state[1];
assign  wfifo_rd_en     =       state[3];
assign  wr_data         =       wfifo_rd_data;


endmodule





